// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: cart.sql

package db

import (
	"context"
	"database/sql"
)

const checkCartDetail = `-- name: CheckCartDetail :one
select case when count(quantity) > 0 then 1 else 0 end as product_quantity from cart_details cd 
where cart_id = $1 and product_id = $2
`

type CheckCartDetailParams struct {
	CartID    sql.NullInt32 `json:"cart_id"`
	ProductID sql.NullInt32 `json:"product_id"`
}

func (q *Queries) CheckCartDetail(ctx context.Context, arg CheckCartDetailParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, checkCartDetail, arg.CartID, arg.ProductID)
	var product_quantity interface{}
	err := row.Scan(&product_quantity)
	return product_quantity, err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
delete from cart_details where cart_id = $1 and product_id = $2
`

type DeleteCartItemParams struct {
	CartID    sql.NullInt32 `json:"cart_id"`
	ProductID sql.NullInt32 `json:"product_id"`
}

func (q *Queries) DeleteCartItem(ctx context.Context, arg DeleteCartItemParams) error {
	_, err := q.db.ExecContext(ctx, deleteCartItem, arg.CartID, arg.ProductID)
	return err
}

const getCartID = `-- name: GetCartID :one
select cart_id from carts where user_id = $1
`

func (q *Queries) GetCartID(ctx context.Context, userID sql.NullInt32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getCartID, userID)
	var cart_id int32
	err := row.Scan(&cart_id)
	return cart_id, err
}

const insertCartItem = `-- name: InsertCartItem :exec
insert into cart_details (cart_id,product_id,product_price,quantity,delivery_price)
values($1,$2,(select price from products p where p.product_id = $2),$3,
(select delivery_price from products p where p.product_id = $2))
`

type InsertCartItemParams struct {
	CartID    sql.NullInt32 `json:"cart_id"`
	ProductID sql.NullInt32 `json:"product_id"`
	Quantity  sql.NullInt32 `json:"quantity"`
}

func (q *Queries) InsertCartItem(ctx context.Context, arg InsertCartItemParams) error {
	_, err := q.db.ExecContext(ctx, insertCartItem, arg.CartID, arg.ProductID, arg.Quantity)
	return err
}

const readCartItemQuantity = `-- name: ReadCartItemQuantity :one
select quantity from cart_details where cart_id = $1 and product_id = $2
`

type ReadCartItemQuantityParams struct {
	CartID    sql.NullInt32 `json:"cart_id"`
	ProductID sql.NullInt32 `json:"product_id"`
}

func (q *Queries) ReadCartItemQuantity(ctx context.Context, arg ReadCartItemQuantityParams) (sql.NullInt32, error) {
	row := q.db.QueryRowContext(ctx, readCartItemQuantity, arg.CartID, arg.ProductID)
	var quantity sql.NullInt32
	err := row.Scan(&quantity)
	return quantity, err
}

const removeCartItem = `-- name: RemoveCartItem :exec
update cart_details set quantity = quantity - $1 where cart_id = $2 and product_id = $3
`

type RemoveCartItemParams struct {
	Quantity  sql.NullInt32 `json:"quantity"`
	CartID    sql.NullInt32 `json:"cart_id"`
	ProductID sql.NullInt32 `json:"product_id"`
}

func (q *Queries) RemoveCartItem(ctx context.Context, arg RemoveCartItemParams) error {
	_, err := q.db.ExecContext(ctx, removeCartItem, arg.Quantity, arg.CartID, arg.ProductID)
	return err
}

const updateCartItemQuantity = `-- name: UpdateCartItemQuantity :exec
update cart_details set quantity = $1 + quantity where product_id = $2 and cart_id = $3
`

type UpdateCartItemQuantityParams struct {
	Quantity  sql.NullInt32 `json:"quantity"`
	ProductID sql.NullInt32 `json:"product_id"`
	CartID    sql.NullInt32 `json:"cart_id"`
}

func (q *Queries) UpdateCartItemQuantity(ctx context.Context, arg UpdateCartItemQuantityParams) error {
	_, err := q.db.ExecContext(ctx, updateCartItemQuantity, arg.Quantity, arg.ProductID, arg.CartID)
	return err
}
